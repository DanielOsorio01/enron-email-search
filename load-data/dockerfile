# Stage 1: Build the Go application
FROM debian:bullseye AS builder

# Install required dependencies for Go
RUN apt-get update && apt-get install -y \
    wget \
    tar \
    gcc \
    make \
    && rm -rf /var/lib/apt/lists/*

# Download and install Go 1.23.4
RUN wget https://go.dev/dl/go1.23.4.linux-amd64.tar.gz && \
    tar -C /usr/local -xvzf go1.23.4.linux-amd64.tar.gz && \
    rm go1.23.4.linux-amd64.tar.gz

# Set the Go binary path
ENV PATH=$PATH:/usr/local/go/bin

# Set the working directory
WORKDIR /app

# Copy the Go source code into the container
COPY . .

# Build the Go executable
RUN go build -o load-data .

# Stage 2: Create a minimal runtime image
FROM debian:bullseye

# Set the working directory in the runtime image
WORKDIR /app

# Install dependencies for downloading and extracting data
RUN apt-get update && apt-get install -y \
    wget \
    tar \
    && rm -rf /var/lib/apt/lists/*

# Set environment variable for the email data URL
ENV EMAIL_DATA_URL=http://www.cs.cmu.edu/~enron/enron_mail_20110402.tgz

# Create a directory to store the downloaded data
RUN mkdir -p /data

# Check if the data already exists before downloading
RUN if [ ! -f /data/enron_mail_20110402.tgz ]; then \
    echo "Downloading email dataset..."; \
    wget -O /data/enron_mail_20110402.tgz $EMAIL_DATA_URL && \
    tar -xvzf /data/enron_mail_20110402.tgz -C /data; \
    else \
    echo "Email dataset already exists. Skipping download."; \
    fi

# Copy the built Go executable from the builder stage
COPY --from=builder /app/load-data .

# List files and directories in the current working directory in the runtime image
RUN echo "Listing directories and files in /app:" && ls -l /app

# Command to run the Go executable to populate the database
CMD ["./load-data", "/data/enron_mail_20110402/maildir"]
